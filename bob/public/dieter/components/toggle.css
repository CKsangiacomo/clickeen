/* Dieter Toggle — token-first CSS-only switch (checkbox-based)
   Contract:
   - Root: .diet-toggle (inline-flex container)
   - Size: data-size="sm|md|lg" → 20/24/28px rails via control tokens
   - Label: .diet-toggle__label (leading text, may be visually hidden by .sr-only)
   - Input: .diet-toggle__input.sr-only[type=checkbox][role=switch]
   - Switch (visible control): .diet-toggle__switch[for]
     • Knob: .diet-toggle__knob
   - Alignment (component-level helpers):
     • .diet-toggle--block → inline-size: 100%
     • .diet-toggle--split → justify-content: space-between (label left, switch right)
   Behaviour:
   - :checked updates track color and translates knob; focus ring forwarded to visual switch.
*/

.diet-toggle {
  display: inline-flex;
  align-items: center;
  gap: var(--control-inline-gap-sm, 0.375rem);
  /* Match Button typography defaults */
  font: var(--control-text-md);
  letter-spacing: var(--control-letter-spacing, 0);
}

/* Alignment helpers (component-scoped) */
.diet-toggle--block { inline-size: 100%; }
.diet-toggle--split { justify-content: space-between; }

/* Size mapping → derive rail height and local gaps */
.diet-toggle[data-size="sm"] { --tog-h: var(--control-size-sm, 1.25rem); --tog-gap: var(--control-inline-gap-xs, 0.25rem); font: var(--control-text-sm); }
.diet-toggle[data-size="md"] { --tog-h: var(--control-size-md, 1.5rem);  --tog-gap: var(--control-inline-gap-sm, 0.375rem); font: var(--control-text-md); }
.diet-toggle[data-size="lg"] { --tog-h: var(--control-size-lg, 1.75rem); --tog-gap: var(--control-inline-gap-sm, 0.375rem); font: var(--control-text-lg); }
.diet-toggle { gap: var(--tog-gap, var(--control-inline-gap-sm, 0.375rem)); }

/* Derived geometry (track width ~1.75× height; knob inset via pad) */
.diet-toggle {
  --tog-w: calc(var(--tog-h) * 1.75);
  --tog-pad: 2px;
  --knob-d: calc(var(--tog-h) - (var(--tog-pad) * 2));
}

/* Visible switch */
.diet-toggle__switch {
  inline-size: var(--tog-w);
  block-size: var(--tog-h);
  display: inline-block;
  position: relative;
  border-radius: calc(var(--tog-h) / 2);
  background: var(--color-system-gray-5, #e5e5ea);
  transition: background-color var(--duration-base, 160ms) ease;
  cursor: pointer;
}

/* Ensure label inherits control typography */
.diet-toggle__label { font: inherit; white-space: nowrap; }

/* Knob */
.diet-toggle__knob {
  position: absolute;
  inset-block-start: var(--tog-pad);
  inset-inline-start: var(--tog-pad);
  inline-size: var(--knob-d);
  block-size: var(--knob-d);
  border-radius: 999px;
  background: var(--color-system-white, #ffffff);
  box-shadow: 0 3px 8px rgba(0,0,0,0.15), 0 3px 1px rgba(0,0,0,0.06);
  transition: transform var(--duration-base, 160ms) ease;
  will-change: transform;
}

/* On state */
.diet-toggle__input:checked + .diet-toggle__switch {
  background: var(--role-success-bg, #34c759);
}
.diet-toggle__input:checked + .diet-toggle__switch .diet-toggle__knob {
  transform: translateX(calc(var(--tog-w) - var(--knob-d) - (var(--tog-pad) * 2)));
}

/* Focus ring forwarded to the visual control */
.diet-toggle__input:focus-visible + .diet-toggle__switch {
  outline: none;
  box-shadow:
    0 0 0 var(--focus-ring-offset, 2px) var(--color-bg, #ffffff),
    0 0 0 calc(var(--focus-ring-offset, 2px) + var(--focus-ring-width, 2px)) var(--focus-ring-color, var(--color-accent));
}

/* Disabled */
.diet-toggle__input:disabled + .diet-toggle__switch {
  opacity: 0.48;
  cursor: not-allowed;
}
.diet-toggle__input:disabled + .diet-toggle__switch .diet-toggle__knob { box-shadow: none; }

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  .diet-toggle__switch, .diet-toggle__knob { transition: none; }
}
